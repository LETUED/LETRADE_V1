"""Initial schema based on design docs

Revision ID: 59a79da12cee
Revises: 
Create Date: 2025-06-25 17:41:16.297738

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '59a79da12cee'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('portfolios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('total_capital', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('available_capital', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('available_capital <= total_capital', name='ck_portfolios_available_le_total'),
    sa.CheckConstraint('available_capital >= 0', name='ck_portfolios_positive_available_capital'),
    sa.CheckConstraint('total_capital >= 0', name='ck_portfolios_positive_total_capital'),
    sa.ForeignKeyConstraint(['parent_id'], ['portfolios.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('idx_portfolios_currency', 'portfolios', ['currency'], unique=False)
    op.create_index('idx_portfolios_is_active', 'portfolios', ['is_active'], unique=False)
    op.create_table('staking_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('exchange', sa.String(length=50), nullable=False),
    sa.Column('asset', sa.String(length=20), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('transaction_type', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('transaction_hash', sa.String(length=255), nullable=True),
    sa.Column('estimated_apr', sa.DECIMAL(precision=10, scale=4), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("status IN ('success', 'failed', 'pending')", name='ck_staking_logs_valid_status'),
    sa.CheckConstraint("transaction_type IN ('stake', 'unstake', 'claim_rewards')", name='ck_staking_logs_valid_type'),
    sa.CheckConstraint('amount > 0', name='ck_staking_logs_positive_amount'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_staking_logs_asset', 'staking_logs', ['asset'], unique=False)
    op.create_index('idx_staking_logs_timestamp', 'staking_logs', ['timestamp'], unique=False)
    op.create_table('strategies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('strategy_type', sa.String(length=50), nullable=False),
    sa.Column('exchange', sa.String(length=50), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('position_sizing_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("exchange IN ('binance', 'coinbase', 'kraken', 'okx')", name='ck_strategies_valid_exchange'),
    sa.CheckConstraint("strategy_type IN ('MA_CROSSOVER', 'MEAN_REVERSION', 'MOMENTUM', 'DCA', 'ML_BASED', 'GRID')", name='ck_strategies_valid_type'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'exchange', 'symbol', name='uq_strategies_name_exchange_symbol')
    )
    op.create_index('idx_strategies_exchange_symbol', 'strategies', ['exchange', 'symbol'], unique=False)
    op.create_index('idx_strategies_is_active', 'strategies', ['is_active'], unique=False)
    op.create_index('idx_strategies_strategy_type', 'strategies', ['strategy_type'], unique=False)
    op.create_table('performance_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=True),
    sa.Column('portfolio_id', sa.Integer(), nullable=True),
    sa.Column('metric_name', sa.String(length=50), nullable=False),
    sa.Column('metric_value', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_performance_metrics_metric_name', 'performance_metrics', ['metric_name'], unique=False)
    op.create_index('idx_performance_metrics_portfolio_id', 'performance_metrics', ['portfolio_id'], unique=False)
    op.create_index('idx_performance_metrics_strategy_id', 'performance_metrics', ['strategy_id'], unique=False)
    op.create_index('idx_performance_metrics_timestamp', 'performance_metrics', ['timestamp'], unique=False)
    op.create_table('portfolio_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('portfolio_id', sa.Integer(), nullable=False),
    sa.Column('rule_type', sa.String(length=50), nullable=False),
    sa.Column('rule_value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("rule_type IN ('max_position_size_percent', 'max_daily_loss_percent', 'max_portfolio_exposure_percent', 'min_position_size_usd', 'max_positions_per_symbol', 'blacklisted_symbols')", name='ck_portfolio_rules_valid_type'),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_portfolio_rules_is_active', 'portfolio_rules', ['is_active'], unique=False)
    op.create_index('idx_portfolio_rules_portfolio_id', 'portfolio_rules', ['portfolio_id'], unique=False)
    op.create_index('idx_portfolio_rules_rule_type', 'portfolio_rules', ['rule_type'], unique=False)
    op.create_table('positions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('exchange', sa.String(length=50), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('position_type', sa.String(length=20), nullable=False),
    sa.Column('entry_price', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('current_size', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('avg_entry_price', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('leverage', sa.Integer(), nullable=True),
    sa.Column('mark_price', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('liquidation_price', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('stop_loss_price', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('take_profit_price', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('unrealized_pnl', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('realized_pnl', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('total_fees', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('is_open', sa.Boolean(), nullable=False),
    sa.Column('opened_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('closed_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint("position_type IN ('spot', 'futures', 'margin')", name='ck_positions_valid_type'),
    sa.CheckConstraint('leverage >= 1 AND leverage <= 125', name='ck_positions_valid_leverage'),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_positions_exchange_symbol', 'positions', ['exchange', 'symbol'], unique=False)
    op.create_index('idx_positions_is_open', 'positions', ['is_open'], unique=False)
    op.create_index('idx_positions_opened_at', 'positions', ['opened_at'], unique=False)
    op.create_index('idx_positions_strategy_id', 'positions', ['strategy_id'], unique=False)
    op.create_table('strategy_portfolio_map',
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('portfolio_id', sa.Integer(), nullable=False),
    sa.Column('allocation_percent', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.CheckConstraint('allocation_percent >= 0 AND allocation_percent <= 100', name='ck_strategy_portfolio_valid_allocation'),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('strategy_id', 'portfolio_id')
    )
    op.create_table('trades',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('exchange', sa.String(length=50), nullable=False),
    sa.Column('exchange_order_id', sa.String(length=255), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.Column('side', sa.String(length=10), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('cost', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('fee', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('fee_currency', sa.String(length=10), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('timestamp_created', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('timestamp_updated', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint("side IN ('buy', 'sell')", name='ck_trades_valid_side'),
    sa.CheckConstraint("status IN ('open', 'closed', 'canceled', 'expired')", name='ck_trades_valid_status'),
    sa.CheckConstraint("type IN ('limit', 'market', 'stop_loss', 'take_profit')", name='ck_trades_valid_type'),
    sa.CheckConstraint('amount > 0', name='ck_trades_positive_amount'),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('exchange_order_id')
    )
    op.create_index('idx_trades_exchange_order_id', 'trades', ['exchange_order_id'], unique=False)
    op.create_index('idx_trades_exchange_symbol', 'trades', ['exchange', 'symbol'], unique=False)
    op.create_index('idx_trades_status', 'trades', ['status'], unique=False)
    op.create_index('idx_trades_strategy_id', 'trades', ['strategy_id'], unique=False)
    op.create_index('idx_trades_timestamp_created', 'trades', ['timestamp_created'], unique=False)
    op.create_table('grid_orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('grid_level', sa.Integer(), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('side', sa.String(length=4), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('exchange_order_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('filled_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint("side IN ('buy', 'sell')", name='ck_grid_orders_valid_side'),
    sa.CheckConstraint("status IN ('active', 'filled', 'cancelled')", name='ck_grid_orders_valid_status'),
    sa.CheckConstraint('amount > 0', name='ck_grid_orders_positive_amount'),
    sa.CheckConstraint('price > 0', name='ck_grid_orders_positive_price'),
    sa.ForeignKeyConstraint(['exchange_order_id'], ['trades.exchange_order_id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('strategy_id', 'grid_level', 'side', name='uq_grid_orders_strategy_level_side')
    )
    op.create_index('idx_grid_orders_grid_level', 'grid_orders', ['grid_level'], unique=False)
    op.create_index('idx_grid_orders_status', 'grid_orders', ['status'], unique=False)
    op.create_index('idx_grid_orders_strategy_id', 'grid_orders', ['strategy_id'], unique=False)
    op.create_table('system_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('level', sa.String(length=20), nullable=False),
    sa.Column('logger_name', sa.String(length=100), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('strategy_id', sa.Integer(), nullable=True),
    sa.Column('trade_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("level IN ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')", name='ck_system_logs_valid_level'),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['trade_id'], ['trades.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_system_logs_level', 'system_logs', ['level'], unique=False)
    op.create_index('idx_system_logs_logger_name', 'system_logs', ['logger_name'], unique=False)
    op.create_index('idx_system_logs_strategy_id', 'system_logs', ['strategy_id'], unique=False)
    op.create_index('idx_system_logs_timestamp', 'system_logs', ['timestamp'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_system_logs_timestamp', table_name='system_logs')
    op.drop_index('idx_system_logs_strategy_id', table_name='system_logs')
    op.drop_index('idx_system_logs_logger_name', table_name='system_logs')
    op.drop_index('idx_system_logs_level', table_name='system_logs')
    op.drop_table('system_logs')
    op.drop_index('idx_grid_orders_strategy_id', table_name='grid_orders')
    op.drop_index('idx_grid_orders_status', table_name='grid_orders')
    op.drop_index('idx_grid_orders_grid_level', table_name='grid_orders')
    op.drop_table('grid_orders')
    op.drop_index('idx_trades_timestamp_created', table_name='trades')
    op.drop_index('idx_trades_strategy_id', table_name='trades')
    op.drop_index('idx_trades_status', table_name='trades')
    op.drop_index('idx_trades_exchange_symbol', table_name='trades')
    op.drop_index('idx_trades_exchange_order_id', table_name='trades')
    op.drop_table('trades')
    op.drop_table('strategy_portfolio_map')
    op.drop_index('idx_positions_strategy_id', table_name='positions')
    op.drop_index('idx_positions_opened_at', table_name='positions')
    op.drop_index('idx_positions_is_open', table_name='positions')
    op.drop_index('idx_positions_exchange_symbol', table_name='positions')
    op.drop_table('positions')
    op.drop_index('idx_portfolio_rules_rule_type', table_name='portfolio_rules')
    op.drop_index('idx_portfolio_rules_portfolio_id', table_name='portfolio_rules')
    op.drop_index('idx_portfolio_rules_is_active', table_name='portfolio_rules')
    op.drop_table('portfolio_rules')
    op.drop_index('idx_performance_metrics_timestamp', table_name='performance_metrics')
    op.drop_index('idx_performance_metrics_strategy_id', table_name='performance_metrics')
    op.drop_index('idx_performance_metrics_portfolio_id', table_name='performance_metrics')
    op.drop_index('idx_performance_metrics_metric_name', table_name='performance_metrics')
    op.drop_table('performance_metrics')
    op.drop_index('idx_strategies_strategy_type', table_name='strategies')
    op.drop_index('idx_strategies_is_active', table_name='strategies')
    op.drop_index('idx_strategies_exchange_symbol', table_name='strategies')
    op.drop_table('strategies')
    op.drop_index('idx_staking_logs_timestamp', table_name='staking_logs')
    op.drop_index('idx_staking_logs_asset', table_name='staking_logs')
    op.drop_table('staking_logs')
    op.drop_index('idx_portfolios_is_active', table_name='portfolios')
    op.drop_index('idx_portfolios_currency', table_name='portfolios')
    op.drop_table('portfolios')
    # ### end Alembic commands ###
