version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: letrade_postgres_prod
    environment:
      POSTGRES_DB: letrade_db
      POSTGRES_USER: letrade_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U letrade_user -d letrade_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - letrade_network_prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: letrade_rabbitmq_prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.8
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - letrade_network_prod

  redis:
    image: redis:7-alpine
    container_name: letrade_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - letrade_network_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  core-engine:
    image: letrade:${VERSION:-latest}
    container_name: letrade_core_engine_prod
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LETRADE_SERVICE: core-engine
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/letrade_db
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - letrade_network_prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  capital-manager:
    image: letrade:${VERSION:-latest}
    container_name: letrade_capital_manager_prod
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LETRADE_SERVICE: capital-manager
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/letrade_db
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - letrade_network_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  exchange-connector:
    image: letrade:${VERSION:-latest}
    container_name: letrade_exchange_connector_prod
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LETRADE_SERVICE: exchange-connector
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/letrade_db
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - letrade_network_prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  telegram-bot:
    image: letrade:${VERSION:-latest}
    container_name: letrade_telegram_bot_prod
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LETRADE_SERVICE: telegram-bot
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/letrade_db
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - letrade_network_prod

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: letrade_prometheus_prod
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    restart: always
    networks:
      - letrade_network_prod

  grafana:
    image: grafana/grafana:latest
    container_name: letrade_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    restart: always
    networks:
      - letrade_network_prod

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: letrade_nginx_prod
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - core-engine
      - grafana
    restart: always
    networks:
      - letrade_network_prod

networks:
  letrade_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data_prod:
  rabbitmq_data_prod:
  redis_data_prod:
  prometheus_data_prod:
  grafana_data_prod: