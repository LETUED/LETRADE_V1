version: '3.8'

services:
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: letrade_test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d letrade_test_db"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test_network

  rabbitmq-test:
    image: rabbitmq:3-alpine
    environment:
      RABBITMQ_DEFAULT_USER: test
      RABBITMQ_DEFAULT_PASS: test
    ports:
      - "5673:5672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test_network

  redis-test:
    image: redis:7-alpine
    command: redis-server --requirepass test
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test_network

  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    environment:
      - ENVIRONMENT=test
      - DATABASE_URL=postgresql+asyncpg://test_user:test_password@postgres-test:5432/letrade_test_db
      - RABBITMQ_URL=amqp://test:test@rabbitmq-test:5672/
      - REDIS_URL=redis://default:test@redis-test:6379/0
      - PYTHONPATH=/app
    volumes:
      - .:/app
    depends_on:
      postgres-test:
        condition: service_healthy
      rabbitmq-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test_network
    command: echo "Test environment ready"

networks:
  test_network:
    driver: bridge