# =============================================================================
# Letrade_v1 Continuous Integration Pipeline
# =============================================================================

name: CI Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # =============================================================================
  # Code Quality & Security Checks
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🎨 Code formatting check
      run: |
        echo "::group::Black formatting check"
        black --check --diff src/ tests/
        echo "::endgroup::"
        
    - name: 📋 Import sorting check
      run: |
        echo "::group::isort import sorting check"
        isort --check-only --diff src/ tests/
        echo "::endgroup::"
        
    - name: 🔍 Linting
      run: |
        echo "::group::flake8 linting"
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        echo "::endgroup::"
        
    - name: 🏷️ Type checking
      run: |
        echo "::group::mypy type checking"
        mypy src/ || echo "⚠️ Type checking issues found (proceeding for MVP)"
        echo "::endgroup::"
        
    - name: 🔐 Security scan
      run: |
        echo "::group::bandit security scan"
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        # Ensure the report exists even if no issues found
        if [ ! -f bandit-report.json ]; then
          echo '{"results": []}' > bandit-report.json
        fi
        echo "::endgroup::"
        
    - name: 📊 Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # =============================================================================
  # Unit Tests
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🧪 Run unit tests
      run: |
        python -m pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-unit.xml \
          -v
          
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: codecov-unit-tests
        
    - name: 📈 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          pytest-unit.xml
          htmlcov/

  # =============================================================================
  # Integration Tests
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: letrade_test_db
          POSTGRES_USER: letrade_user
          POSTGRES_PASSWORD: letrade_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: letrade_user
          RABBITMQ_DEFAULT_PASS: letrade_password
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🗄️ Set up database
      run: |
        export DATABASE_URL="postgresql://letrade_user:letrade_password@localhost:5432/letrade_test_db"
        python -c "
        import psycopg2
        conn = psycopg2.connect('$DATABASE_URL')
        with open('migrations/001_initial_schema.sql', 'r') as f:
            cur = conn.cursor()
            cur.execute(f.read())
            conn.commit()
        conn.close()
        "
        
    - name: 🧪 Run integration tests
      env:
        DATABASE_URL: postgresql://letrade_user:letrade_password@localhost:5432/letrade_test_db
        RABBITMQ_URL: amqp://letrade_user:letrade_password@localhost:5672/
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/integration/ \
          --cov=src \
          --cov-append \
          --cov-report=xml \
          --junitxml=pytest-integration.xml \
          -v
          
    - name: 📊 Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: pytest-integration.xml

  # =============================================================================
  # Build & Package
  # =============================================================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        
    - name: 🏗️ Build package
      run: python -m build
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: letrade-v1:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # Security & Dependency Checks
  # =============================================================================
  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety
        
    - name: 🔐 Check for known security vulnerabilities
      run: |
        echo "::group::Safety security check"
        safety check --json --output safety-report.json || true
        echo "::endgroup::"
        
    - name: 📊 Upload security check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-check-results
        path: safety-report.json

  # =============================================================================
  # Final Status Check
  # =============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, build, security]
    if: always()
    
    steps:
    - name: ✅ Check CI Status
      run: |
        if [[ "${{ needs.code-quality.result }}" != "success" || \
              "${{ needs.unit-tests.result }}" != "success" || \
              "${{ needs.integration-tests.result }}" != "success" || \
              "${{ needs.build.result }}" != "success" || \
              "${{ needs.security.result }}" != "success" ]]; then
          echo "❌ CI Pipeline failed"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1
        else
          echo "✅ All CI checks passed successfully!"
        fi