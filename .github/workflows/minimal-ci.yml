# 🚀 최소한의 CI - 빠른 검증용
# 로컬 테스트 중심, GitHub Actions는 기본 검증만

name: Minimal CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

# 동시 실행 제한
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 기본 검증만 수행 (1-2분 이내 완료)
  quick-validation:
    name: "⚡ 빠른 검증"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
    # 1. 체크아웃
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    # 2. Python 설정 (캐시 사용)
    - name: 🐍 Python 설정
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        
    # 3. 최소 의존성만 설치
    - name: 📦 최소 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
        
    # 4. Python 문법 검사만
    - name: 🔍 Python 문법 체크
      run: |
        python -m py_compile src/core_engine/main.py || echo "Main module syntax issue"
        python -c "import ast; ast.parse(open('src/strategies/base_strategy.py').read())" || echo "Strategy syntax issue"
        echo "✅ 기본 문법 검사 완료"
        
    # 5. 코드 포맷팅 체크만
    - name: 🎨 포맷팅 체크
      run: |
        black --check src/ tests/ || echo "Formatting issues - run 'black src/ tests/' locally"
        echo "✅ 포맷팅 검사 완료"
        
    # 6. 보안 간단 체크
    - name: 🔒 보안 체크
      run: |
        # 실제 하드코딩된 키만 체크 (20자 이상)
        if grep -r "api_key.*=.*['\"][a-zA-Z0-9]\{20,\}['\"]" src/ --include="*.py" 2>/dev/null; then
          echo "❌ 하드코딩된 API 키 발견"
          exit 1
        fi
        echo "✅ 보안 체크 완료"
        
    # 7. 성공 메시지
    - name: ✅ 검증 완료
      run: |
        echo "🎉 빠른 검증 완료!"
        echo ""
        echo "📝 참고사항:"
        echo "- 전체 테스트는 로컬에서 실행하세요: ./scripts/test_local.sh"
        echo "- 릴리즈는 auto-release 워크플로우에서 처리됩니다"
        echo "- 이 CI는 기본 검증만 수행합니다"