# =============================================================================
# Pull Request Validation Workflow
# =============================================================================

name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, dev ]

jobs:
  # =============================================================================
  # PR Information & Validation
  # =============================================================================
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📋 PR Information
      run: |
        echo "## 📋 Pull Request Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.head_ref }} → ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Changed**: $(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Lines Added**: +$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{add += $1} END {print add}')" >> $GITHUB_STEP_SUMMARY
        echo "- **Lines Removed**: -$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{del += $2} END {print del}')" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔍 Check PR Title Format
      run: |
        title="${{ github.event.pull_request.title }}"
        if [[ ! "$title" =~ ^(feat|fix|docs|refactor|test|chore|style|perf|ci|build|revert)(\(.+\))?: .+ ]]; then
          echo "❌ PR title must follow conventional commit format"
          echo "Examples:"
          echo "  feat: add new trading strategy"
          echo "  fix(core): resolve memory leak in strategy worker"
          echo "  docs: update API documentation"
          exit 1
        fi
        echo "✅ PR title format is valid"
        
    - name: 📝 Check PR Description
      run: |
        body="${{ github.event.pull_request.body }}"
        if [[ ${#body} -lt 50 ]]; then
          echo "❌ PR description must be at least 50 characters"
          echo "Current length: ${#body}"
          exit 1
        fi
        echo "✅ PR description length is adequate"
        
    - name: 🏷️ Check Labels
      run: |
        labels="${{ toJson(github.event.pull_request.labels.*.name) }}"
        if [[ "$labels" == "[]" ]]; then
          echo "⚠️ Consider adding labels to categorize this PR"
          echo "Available labels: feature, bugfix, documentation, enhancement, breaking-change"
        else
          echo "✅ PR has labels: $labels"
        fi

  # =============================================================================
  # Safety Checks for Trading System
  # =============================================================================
  trading-safety-checks:
    name: Trading System Safety Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔐 Check for hardcoded secrets
      run: |
        echo "🔍 Scanning for hardcoded secrets..."
        
        # Common patterns that should not be in code
        patterns=(
          "api_key.*=.*[\"'][a-zA-Z0-9]{20,}[\"']"
          "secret.*=.*[\"'][a-zA-Z0-9]{20,}[\"']"
          "password.*=.*[\"'][^\"']{8,}[\"']"
          "private_key.*=.*[\"'][^\"']{50,}[\"']"
          "binance.*key"
          "coinbase.*key"
        )
        
        violations=0
        for pattern in "${patterns[@]}"; do
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | xargs grep -l "$pattern" 2>/dev/null; then
            echo "❌ Found potential hardcoded secret: $pattern"
            violations=$((violations + 1))
          fi
        done
        
        if [[ $violations -gt 0 ]]; then
          echo "❌ $violations potential security violations found"
          echo "📋 Use GCP Secret Manager or environment variables instead"
          exit 1
        fi
        
        echo "✅ No hardcoded secrets detected"
        
    - name: ⚡ Check for dry-run safety
      run: |
        echo "🔍 Checking for proper dry-run implementation..."
        
        # Check if new trading code has dry-run protection
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(exchange_connector|strategies)" | xargs grep -l "execute_trade\|place_order" 2>/dev/null; then
          if ! git diff origin/${{ github.base_ref }}...HEAD | grep -q "dry_run\|test_mode\|mock"; then
            echo "⚠️ New trading code detected without clear dry-run protection"
            echo "📋 Ensure all trading operations can be executed in dry-run mode"
          else
            echo "✅ Dry-run protection appears to be implemented"
          fi
        fi
        
    - name: 🛡️ Check capital management validation
      run: |
        echo "🔍 Checking capital management validation..."
        
        # Check if new strategy code validates through capital manager
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "strategies" | xargs grep -l "trade\|signal" 2>/dev/null; then
          if git diff origin/${{ github.base_ref }}...HEAD | grep -q "capital_manager\|CapitalManager\|validate_trade"; then
            echo "✅ Capital management validation appears to be implemented"
          else
            echo "⚠️ New strategy code should validate trades through CapitalManager"
          fi
        fi

  # =============================================================================
  # Breaking Changes Detection
  # =============================================================================
  breaking-changes:
    name: Breaking Changes Detection
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 Detect breaking changes
      run: |
        echo "🔍 Checking for potential breaking changes..."
        
        breaking_changes=0
        
        # Check for removed or renamed files in critical areas
        if git diff --name-status origin/${{ github.base_ref }}...HEAD | grep -E "^D.*src/(core_engine|strategies|capital_manager|exchange_connector)"; then
          echo "⚠️ Critical files were deleted"
          breaking_changes=1
        fi
        
        # Check for changes to BaseStrategy interface
        if git diff origin/${{ github.base_ref }}...HEAD -- src/strategies/base_strategy.py | grep -E "^-.*def |^-.*class "; then
          echo "⚠️ BaseStrategy interface may have breaking changes"
          breaking_changes=1
        fi
        
        # Check for database schema changes
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "migrations/"; then
          echo "⚠️ Database migration detected - ensure backward compatibility"
          breaking_changes=1
        fi
        
        if [[ $breaking_changes -gt 0 ]]; then
          echo "## ⚠️ Potential Breaking Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "This PR may contain breaking changes. Please:" >> $GITHUB_STEP_SUMMARY
          echo "- Review the changes carefully" >> $GITHUB_STEP_SUMMARY  
          echo "- Update documentation if needed" >> $GITHUB_STEP_SUMMARY
          echo "- Consider adding migration guides" >> $GITHUB_STEP_SUMMARY
          echo "- Add 'breaking-change' label" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No breaking changes detected"
        fi

  # =============================================================================
  # Documentation Checks
  # =============================================================================
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📚 Check documentation updates
      run: |
        echo "📚 Checking documentation updates..."
        
        # Check if code changes require documentation updates
        code_changes=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "src/.*\.py$" | wc -l)
        doc_changes=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(README|docs/|\.md$)" | wc -l)
        
        echo "Code files changed: $code_changes"
        echo "Documentation files changed: $doc_changes"
        
        if [[ $code_changes -gt 5 && $doc_changes -eq 0 ]]; then
          echo "## 📚 Documentation Update Recommended" >> $GITHUB_STEP_SUMMARY
          echo "This PR changes $code_changes code files but no documentation." >> $GITHUB_STEP_SUMMARY
          echo "Consider updating:" >> $GITHUB_STEP_SUMMARY
          echo "- README.md if adding new features" >> $GITHUB_STEP_SUMMARY
          echo "- API documentation if changing interfaces" >> $GITHUB_STEP_SUMMARY
          echo "- Architecture docs if changing system design" >> $GITHUB_STEP_SUMMARY
        elif [[ $doc_changes -gt 0 ]]; then
          echo "✅ Documentation updates included"
        fi

  # =============================================================================
  # Test Coverage Check
  # =============================================================================
  test-coverage-check:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🧪 Check test coverage for new code
      run: |
        echo "🧪 Checking test coverage for changed files..."
        
        # Get list of changed Python files
        changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "src/.*\.py$" || true)
        
        if [[ -n "$changed_files" ]]; then
          echo "Changed files:"
          echo "$changed_files"
          
          # Check if corresponding test files exist
          missing_tests=0
          for file in $changed_files; do
            # Convert src/module/file.py to tests/unit/test_module_file.py
            test_file=$(echo "$file" | sed 's|src/|tests/unit/test_|; s|/|_|g; s|\.py$|.py|')
            
            if [[ ! -f "$test_file" ]]; then
              echo "⚠️ Missing test file: $test_file"
              missing_tests=$((missing_tests + 1))
            fi
          done
          
          if [[ $missing_tests -gt 0 ]]; then
            echo "## 🧪 Test Coverage Reminder" >> $GITHUB_STEP_SUMMARY
            echo "$missing_tests files may need corresponding tests." >> $GITHUB_STEP_SUMMARY
            echo "Consider adding unit tests for new functionality." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Test files appear to exist for changed code"
          fi
        else
          echo "No Python source files changed"
        fi